#include<iostream>
using namespace std;

class Node{
    public:
        int val;
        Node* next;
        Node(int data){
            val = data;
            next = NULL;
            
        }
};
class LinkedList{
public:
    Node* head;
    
    LinkedList(){
        head=NULL;
    }
    void inseratTail(int value){
        Node* new_node = new Node(value);
        if(head== NULL){
            head = new_node;
            return;
        }
        Node* temp = head;
        while(temp->next!=NULL){
            temp= temp->next;
        }
        temp->next= new_node;
    }
    
    void display(){
        Node* temp = head;
        while(temp!=NULL){
            cout<<temp->val<<"->";
            temp=temp->next;
        }cout<<"NULL"<<endl;
        
    }

};
void deleteAlternateNodes(Node* &head){
    Node* curr_node = head;
    while(curr_node!=NULL && curr_node->next!=NULL){
        Node* temp = curr_node->next;
        curr_node->next = curr_node->next->next;
        free(temp);
        curr_node=curr_node->next;
    }
}
void deleteDuplicateNodes(Node* &head){
    Node* curr_node = head;
    while(curr_node){
        while(curr_node->next && curr_node->val == curr_node->next->val){
            Node* temp = curr_node->next;
            curr_node->next=curr_node->next->next;
            free(temp);
        }
        curr_node= curr_node->next;
    }
    
}

void reversePrint(Node* head){
    if (head== NULL){
        return;
    }
    reversePrint(head->next);
    cout<<head->val<<" ";
}
Node* reverse_original(Node* &head){
    Node*prevptr = NULL;
    Node* currptr = head;
    
    while(currptr!=NULL){
        Node* nextptr = currptr->next;
        currptr->next = prevptr;
        prevptr=currptr;
        currptr=nextptr;
        
    }
    Node* new_head=prevptr;
    return new_head;
}

Node* reverseLLRecursion(Node* &head){
    //base case 
    if (head == NULL || head->next==NULL){
        return head;
    }
    
    //recursive case 
    Node* new_head = reverseLLRecursion(head->next);
    head->next->next = head;
    head->next = NULL;
    return new_head; 
}


int main(){
    
    LinkedList ll;
    ll.inseratTail(1);
    ll.inseratTail(5);
    ll.inseratTail(3);
    ll.inseratTail(7);
    ll.inseratTail(9);
    ll.inseratTail(9);
    ll.display();
    //deleteAlternateNodes(ll.head);
    //ll.display();
    deleteDuplicateNodes(ll.head);
    ll.display();
    reversePrint(ll.head);
    cout<<endl;
    ll.head=reverseLLRecursion(ll.head);
    
    ll.display();
    
    return 0;
    
}



